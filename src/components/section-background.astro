---
interface Props {
	sectionId: string;
}

const gridSize = 80;
const padding = 10;
const { sectionId } = Astro.props;
---

<div
	style="--mx: 50%; --my: 50%"
	class:list={[
		"absolute inset-0 -z-1 opacity-25 overflow-clip bg-radial-[circle_at_var(--mx)_var(--my)] bg-cover from-primary/40 to-transparent ",
		`${sectionId}-svg-container`,
	]}
>
	<svg
		class:list={[
			`${sectionId}-svg-grid`,
			`mask-[radial-gradient(circle_at_var(--mx)_var(--my),#0008_20%,transparent_30%)]`,
		]}
		width="100%"
		height="100%"
		xmlns="http://www.w3.org/2000/svg"
	>
		<defs>
			<pattern
				id="smallGrid"
				width={gridSize}
				height={gridSize}
				patternUnits="userSpaceOnUse"
			>
				<path
					d={`M ${padding} ${padding} L ${gridSize - padding} ${padding} L ${gridSize - padding} ${gridSize - padding} L ${padding} ${gridSize - padding} L ${padding} ${padding}`}
					fill="var(--primary)"
					stroke="var(--accent)"
					stroke-width="3"></path>
			</pattern>

			<pattern
				id="grid"
				width={gridSize}
				height={gridSize}
				patternUnits="userSpaceOnUse"
			>
				<rect width={gridSize} height={gridSize} fill="url(#smallGrid)"
				></rect>
			</pattern>
		</defs>
		<rect width="100%" height="100%" fill="url(#grid)"></rect>
	</svg>
</div>

<style>
	@property --angle {
		syntax: "<angle>";
		initial-value: 0deg;
		inherits: true;
	}
	/* div[class$="-svg-container"] {
		background: linear-gradient(
				color-mix(in hsl, var(--primary) 20%, transparent),
				color-mix(in hsl, var(--primary) 20%, transparent)
			),
			conic-gradient(
				from calc(var(--angle) + 45deg) at 0% 0%,
				transparent,
				color-mix(in hsl, var(--primary) 30%, transparent) 10%,
				color-mix(in hsl, var(--primary) 0%, transparent) 50%,
				transparent 100%
			),
			conic-gradient(
				from calc(var(--angle) + 180deg) at 100% 100%,
				transparent,
				color-mix(in hsl, var(--foreground) 0%, transparent) 10%,
				color-mix(in hsl, var(--foreground) 30%, transparent) 50%,
				transparent 100%
			);
		animation: rotate 20s linear infinite;
	} */

	@keyframes rotate {
		from {
			--angle: 0deg;
		}
		to {
			--angle: 360deg;
		}
	}
</style>
<script>
	document.addEventListener("DOMContentLoaded", () => {
		const mouseMoveListeners = new Map<Element, (e: MouseEvent) => void>();

		const containers = document.querySelectorAll(
			`[class*="-svg-container"]`
		);
		containers.forEach((container) => {
			const handleMouseMove = (e: MouseEvent) => {
				const svg = container.querySelector(`[class*="-svg-grid"]`);
				if (!svg || !container) return;

				const rect = container.getBoundingClientRect();

				const mouseX = e.clientX - rect.left;
				const mouseY = e.clientY - rect.top;

				const xPercentage = (mouseX / rect.width) * 100;
				const yPercentage = (mouseY / rect.height) * 100;

				// @ts-ignore
				container.style.setProperty("--mx", `${xPercentage}%`)!;
				// @ts-ignore
				container.style.setProperty("--my", `${yPercentage}%`)!;
			};
			mouseMoveListeners.set(container, handleMouseMove);
		});
		document.addEventListener("mousemove", (e: MouseEvent) => {
			mouseMoveListeners.forEach((listener, container) => {
				listener(e);
			});
		});

		return () => {
			mouseMoveListeners.clear();
		};
	});
</script>
